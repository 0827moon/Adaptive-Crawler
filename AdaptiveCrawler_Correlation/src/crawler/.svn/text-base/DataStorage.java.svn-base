package crawler;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import crawler.util.DBUtil;
import crawler.util.Settings;

import twitter4j.HashtagEntity;
import twitter4j.Status;

public class DataStorage{
	private static ArrayList<Status> statusList;
	
	private static Connection conn;
	private static Statement stmt;
	private static PreparedStatement pstm;
	
	private static String sqlFormat = "insert into " +Settings.tableName+ "(createdAt, " +
			"geoLocationLat, geoLocationLong, placeInfo, id, tweet, source, " +
			"lang, screenName, replyTo, rtCount, hashtags) "+
		"values(?,?,?,?,?,?,?,?,?,?,?,?)";
	private static String tableContent = "CREATE TABLE IF NOT EXISTS "+Settings.tableName+
			"(createdAt text DEFAULT NULL, " +
			"geoLocationLat double NOT NULL," +
			"geoLocationLong double NOT NULL," +	
			"placeInfo text, "+
			"id bigint(50) NOT NULL, " +
			"tweet text, " +
			"source text, " +
			"lang text," +
			"screenName VARCHAR(150), "+
			"replyTo text, "+
			"rtCount bigint(50), "+
			"hashtags text, "+ 
			"PRIMARY KEY (id)" +
			");"; //upper and lower case are the same: COLLATE=utf8_unicode_ci;";
	
	public static boolean checkDB(String dbName) {
		double fileSize = Settings.fileSize;
		long maxFileSize = (long) (fileSize * 1024 * 1024 * 1024);
		long actFileSize = 0;
		String filepath = dbName;
		
		FileInputStream fis;
		try {
			fis = new FileInputStream(new File(filepath));
			actFileSize = fis.available();
		} catch (Exception e) {e.printStackTrace();}
		if (actFileSize < maxFileSize)	return false;
		else return true;
	}

	public static void initialTable() {
		conn=DBUtil.getConn(Settings.databaseName);
		stmt=DBUtil.createStmt(conn);
		DBUtil.update(tableContent, stmt);
		DBUtil.close(conn, stmt, null, null);
	}

	public static void tableUpdate() throws SQLException {
		System.out.print("STORING DATA TO DATABASE...");
		long begin = System.currentTimeMillis();
		conn=DBUtil.getConn(Settings.databaseName);
		pstm=DBUtil.createPreStmt(conn, sqlFormat);
		conn.setAutoCommit(false);
		
		statusList = TwitterCrawler.dataStream.getList();
		System.out.print(statusList.size()+" items...");
		for (int i = 0; i < statusList.size();i++) {
			sqlStore(statusList.get(i));
		}		
		pstm.executeBatch();
		conn.commit();
		DBUtil.close(conn, stmt, pstm, null);		
		long end = System.currentTimeMillis();
		System.out.println("STORAGE FINISHED IN "+ (end-begin)/1000.00 +" SECS...");
	}
	
	private static void sqlStore(Status status) throws SQLException{
		SimpleDateFormat tempDate = new SimpleDateFormat("yyyy-MM-dd, HH:mm:ss, z");
		String sqlCreateAt = tempDate.format(new java.util.Date(status.getCreatedAt().getTime()));

		double sqlGeoLocationLat = 0;
		double sqlGeoLocationLong = 0;
		
		if (status.getGeoLocation()!=null){
			sqlGeoLocationLat = status.getGeoLocation().getLatitude();
			sqlGeoLocationLong = status.getGeoLocation().getLongitude();
		}
		
		String sqlPlace = (status.getPlace()!= null ? status.getPlace().getFullName(): "");
		long sqlId = status.getId();
		String sqlTweet = status.getText().replace("'", "''");
		String sqlSource = status.getSource().replace("'", "''");
		sqlSource = sqlSource.replace("\\","\\\\");
		String sqlLang = status.getUser().getLang();	
		String sqlScreenName = status.getUser().getScreenName();			
		String sqlReplyTo = status.getInReplyToScreenName();		
		long sqlRtCount = status.getRetweetCount();
		
		HashtagEntity[] tags = status.getHashtagEntities();
		String sqlHashtags = "";
		for (HashtagEntity t: tags) sqlHashtags+=t.getText()+" "; 
		
		/*String sql="insert into " +Settings.tableName+ "(createdAt, geoLocationLat, geoLocationLong, placeInfo, id, tweet, source, lang, screenName, replyTo, hashtags) "+
		"values('"+sqlCreateAt+"','"+sqlGeoLocationLat+"','"+sqlGeoLocationLong+"','"+sqlPlace+"','"+sqlId+"','"+sqlTweet+"','"+sqlSource+"','"+sqlLang+"','"+sqlScreenName+"','"+sqlReplyTo+"','"+hashtags+"')";
		DBUtil.update(sql, stmt);*/
		
		pstm.setString(1, sqlCreateAt);
		pstm.setDouble(2, sqlGeoLocationLat);
		pstm.setDouble(3, sqlGeoLocationLong);
		pstm.setString(4, sqlPlace);
		pstm.setLong(5, sqlId);
		pstm.setString(6, sqlTweet);
		pstm.setString(7, sqlSource);
		pstm.setString(8, sqlLang);
		pstm.setString(9, sqlScreenName);
		pstm.setString(10, sqlReplyTo);
		pstm.setLong(11, sqlRtCount);
		pstm.setString(12, sqlHashtags);
		
		pstm.addBatch();
	}
}
